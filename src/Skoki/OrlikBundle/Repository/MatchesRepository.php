<?php

namespace Skoki\OrlikBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MatchesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MatchesRepository extends EntityRepository
{
    public function getMatchList($teamId = null)
    {
        $em = $this->getEntityManager();
        $gb = $em->createQueryBuilder();
        $gb->select('m')
            ->from('SkokiOrlikBundle:Matches', 'm')
//            ->join('SkokiOrlikBundle:Teams', 't')
//            ->leftJoin('tc.user', 't')
//            ->where('m.id = tm.match_id')
//            ->andWhere('t.id = tm.home')
            ->orderBy('m.matchDate', 'DESC');

        if ($teamId !== null) {
            $gb->add('where',$gb->expr()->orX(
                $gb->expr()->eq('m.home', '?1'),
                $gb->expr()->eq('m.away', '?1')
            ));
            $gb->setParameters(array(1 => $teamId));
        }

        $query = $gb->getQuery();
        if ($teamId == null) {
            $teams = $query->getArrayResult();
        } else {
            $teams = $query->getResult();
        }

        return $teams;

    }

    public function getListWithTeams($teamId = null, $round = null)
    {
        $em = $this->getEntityManager();
        $gb = $em->createQueryBuilder();
        $gb->select('m.id, m.matchDate, m.home, m.away, t.name, t.id as team_id, m.result')
            ->from('SkokiOrlikBundle:Matches', 'm')
            ->join('SkokiOrlikBundle:Teams', 't')
//            ->leftJoin('tc.user', 't')
            ->where('m.home = t.id')
            ->orWhere('m.away = t.id')
            ->orderBy('m.matchDate', 'DESC');
        if ($teamId !== null) {
            $gb->add('where',$gb->expr()->orX(
                $gb->expr()->eq('m.home', '?1'),
                $gb->expr()->eq('m.away', '?1')
            ));
            $gb->setParameters(array(1 => $teamId));
        }
        if ($round !== null) {
//            $mm = '';
//            foreach ($machesList as $m) {
//                $mm .= '"' . $m . '",';
//            }
            $gb->add('where',$gb->expr()->eq('m.rounds', '?2'));
            $gb->setParameters(array(2 => $round));
        }

        $query = $gb->getQuery();

        $teams = $query->getArrayResult();
        $result = array();

        foreach ($teams as $t) {
            $result[$t['id']]['id'] = $t['id'];
            $result[$t['id']]['matchDate'] = $t['matchDate'];
            $result[$t['id']]['score'] = $t['result'];
            if ($t['home'] === $t['team_id']) {
                $result[$t['id']]['home'] = $t['name'];
                $result[$t['id']]['home_id'] = $t['team_id'];
            }
            if ($t['away'] === $t['team_id']) {
                $result[$t['id']]['away'] = $t['name'];
                $result[$t['id']]['away_id'] = $t['team_id'];
            }
        }

        return $result;

    }

    public function getTeamMatchList($teamId = null)
    {
        $em = $this->getEntityManager();
        $gb = $em->createQueryBuilder();
        $gb->select('m')
            ->from('SkokiOrlikBundle:Matches', 'm')
//            ->join('OrlikHomepageBundle:Teams', 't')
//            ->leftJoin('tc.user', 't')
//            ->where('m.id = tm.match_id')
//            ->andWhere('t.id = tm.home')
            ->orderBy('m.matchDate', 'ASC');

        if ($teamId !== null) {
            $gb->add('where',$gb->expr()->orX(
                $gb->expr()->eq('m.home', '?1'),
                $gb->expr()->eq('m.away', '?1')
            ));
            $gb->setParameters(array(1 => $teamId));
        }

        $query = $gb->getQuery();
        if ($teamId == null) {
            $teams = $query->getArrayResult();
        } else {
            $teams = $query->getResult();
        }

        return $teams;

    }

    public function getTeamLasMatchList($teamId = null)
    {
        $em = $this->getEntityManager();
        $gb = $em->createQueryBuilder();
        $nowDate = new \DateTime();
        $gb->select('m')
            ->from('SkokiOrlikBundle:Matches', 'm')
//            ->join('OrlikHomepageBundle:Teams', 't')
//            ->leftJoin('tc.user', 't')
            ->where("m.matchDate<NOW()")
//            ->andWhere('t.id = tm.home')
            ->orderBy('m.matchDate', 'DESC');

        if ($teamId !== null) {
            $gb->add('where',$gb->expr()->andX(
                $gb->expr()->isNotNull('m.result'),
                $gb->expr()->orX(
                    $gb->expr()->eq('m.home', '?1'),
                    $gb->expr()->eq('m.away', '?1')
                )));
            $gb->setParameters(array(1 => $teamId));
        }

        $query = $gb->getQuery();

        if ($teamId == null) {
            $teams = $query->getArrayResult();
        } else {
            $teams = $query->getResult();
        }

        return $teams;
    }

    public function getTeamPlayedMatches($teamId)
    {
/*
 * select * from matches where round in (select id from rounds where tournament = 1) and (home = 5 OR away = 5) and result is not null
 */
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder();
        $query->select('m')
            ->from('SkokiOrlikBundle:Matches', 'm')
            ->where('m.result IS NOT NULL')
//            ->andWhere('round IN (:roundsIds)')
            ->andWhere('m.home = :team OR m.away = :team')
            ->orderBy('m.matchDate', 'DESC')
            ->setParameters(array(
                'team' => $teamId
            ));

        return $query->getQuery()->getArrayResult();

    }

}
